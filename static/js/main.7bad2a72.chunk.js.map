{"version":3,"sources":["Footer.js","Header.js","img/search-icon.png","SearchBar.js","SearchPage.js","WatchList.js","InfoList.js","ItemInfo.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","React","Component","Header","className","activeClassName","exact","to","item_list","getSuggestions","value","console","log","inputValue","trim","toLowerCase","inputLength","length","filter","item","name","slice","getSuggestionValue","suggestion","renderSuggestion","SearchBar","updateQuery","event","newValue","setState","query","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","enterPressed","onChange","replace","bind","handleKeyDown","retrieveAllItems","window","addEventListener","this","prevProps","prevState","a","fetch","result","json","keyCode","which","newQuery","location","href","substring","props","history","push","inputProps","placeholder","src","icon","height","width","alt","withRouter","SearchPage","WatchList","items","itemsPerPage","offset","urgentOffset","updateData","removeItem","handlePageClick","intervalID","setInterval","clearInterval","data","isUrgent","selected","Math","ceil","item_id","totalPages","urgentItems","is_urgent","totalUrgentPages","map","avg_price","min_price","max_price","onClick","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","InfoList","propsObject","title","i","ItemInfo","successfulAPICall","waiting","isSingleItem","itemsInSet","tradingTax","ducats","relics","imgUrl","itemName","itemId","newProps","match","params","split","join","retrieveData","url","itemResults","itemJson","undefined","endsWith","includes","avgPrice","getAvgPrice","minPrice","getMinPrice","maxPrice","getMaxPrice","getImage","getRelics","getTradingTax","getDucats","getItemName","Promise","all","items_in_set","img","img_url","trading_tax","id","chartData","order_history","forEach","order","index","x","y","platinum","pricingData","ducatsData","tradingTaxData","relicNames","relic","relicsData","addItem","style","fill","fillOpacity","stroke","strokeWidth","labels","fontSize","datum","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bad2a72.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Footer.css'\r\n\r\nclass Footer extends React.Component {\r\n  render () {\r\n    return <div />\r\n  }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass Header extends React.Component {\r\n  render () {\r\n    return (\r\n      <nav className='navbar navbar-dark bg-dark'>\r\n        <ul className='navbar-nav'>\r\n          <li className='nav-item'>\r\n            <NavLink className='nav-link' activeClassName='text-danger' exact to='/'>HOME</NavLink>\r\n          </li>\r\n          <li className='nav-item'>\r\n            <NavLink className='nav-link' activeClassName='text-danger' to='/watchlist'>WATCH LIST</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","export default __webpack_public_path__ + \"static/media/search-icon.afde00ab.png\";","/* eslint-disable */\r\nimport React from 'react'\r\nimport './SearchBar.css'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport icon from './img/search-icon.png'\r\nimport Autosuggest from 'react-autosuggest'\r\n\r\nlet item_list = {}\r\n\r\nconst getSuggestions = value => {\r\n  console.log(value)\r\n  if (!value) return []\r\n  const inputValue = value.trim().toLowerCase()\r\n  const inputLength = inputValue.length\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : item_list\r\n        .filter(\r\n          item => item.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        )\r\n        .slice(0, 6)\r\n}\r\n\r\n/** This function returns the value that should be displayed by a suggestion\r\n * @param {string} suggestion\r\n */\r\nconst getSuggestionValue = suggestion => suggestion.name\r\n\r\n/** This function renders a single suggestion in our autosuggest\r\n * @param {string} suggestion\r\n */\r\nconst renderSuggestion = suggestion => (\r\n  <div className=\"suggestion\">{suggestion.name}</div>\r\n)\r\n\r\n/** This class will represent our Search Bar, with autosuggest functionality\r\n */\r\nclass SearchBar extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      value: '',\r\n      enterPressed: false,\r\n      suggestions: []\r\n    }\r\n\r\n    this.onChange = (event, { newValue }) => {\r\n      newValue = newValue.replace('&', 'and')\r\n      this.setState({ value: newValue })\r\n    }\r\n    this.updateQuery = this.updateQuery.bind(this)\r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n    this.retrieveAllItems()\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown)\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.enterPressed !== this.state.enterPressed) {\r\n      this.setState({ enterPressed: false })\r\n    }\r\n  }\r\n\r\n  async retrieveAllItems() {\r\n    const result = await fetch('/api/items')\r\n    const json = await result.json()\r\n    item_list = json\r\n  }\r\n\r\n  /** This handler submits our query when the enter key is pressed\r\n   * @param {KeyPressedEvent} event\r\n   */\r\n  handleKeyDown(event) {\r\n    const code = event.keyCode ? event.keyCode : event.which\r\n    if (code === 13) {\r\n      this.setState({ enterPressed: true })\r\n    }\r\n  }\r\n  /** This function updates our query based on current input\r\n   * @param {event} event\r\n   */\r\n  updateQuery = (event, { newValue }) => {\r\n    this.setState({ query: newValue })\r\n  }\r\n\r\n  /** This function updates our state with the list of suggestions based on current input\r\n   * @param {string} value\r\n   */\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({ suggestions: getSuggestions(value) })\r\n  }\r\n\r\n  /** This function clears the suggestions when we click out of the search bar\r\n   */\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({ suggestions: [] })\r\n  }\r\n\r\n  render() {\r\n    const url = window.location.href\r\n    const newQuery = url.substring(30)\r\n    const { value, enterPressed, suggestions } = this.state\r\n\r\n    if (enterPressed && value && value !== newQuery && value.trim() !== '') {\r\n      this.props.history.push('/items/' + value)\r\n    }\r\n\r\n    const inputProps = {\r\n      placeholder: 'Search and Item',\r\n      value,\r\n      onChange: this.onChange\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron autosuggest-container\">\r\n          <Autosuggest\r\n            suggestions={suggestions}\r\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n            getSuggestionValue={getSuggestionValue}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={inputProps}\r\n          />\r\n          <Link to={'/items/' + value}>\r\n            <img src={icon} height=\"30\" width=\"30\" alt=\"Search Button\"></img>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SearchBar)\r\n","import React from 'react'\r\nimport './SearchPage.css'\r\nimport SearchBar from './SearchBar'\r\n\r\nclass SearchPage extends React.Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1 className='jumbotron'>Warframe Tracker</h1>\r\n        <SearchBar />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchPage\r\n","/* eslint-disable */\r\nimport React from 'react'\r\nimport './WatchList.css'\r\nimport ReactPaginate from 'react-paginate'\r\n\r\nclass WatchList extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      items: [],\r\n      itemsPerPage: 5,\r\n      offset: 0,\r\n      urgentOffset: 0\r\n    }\r\n    this.updateData = this.updateData.bind(this)\r\n    this.removeItem = this.removeItem.bind(this)\r\n    this.handlePageClick = this.handlePageClick.bind(this)\r\n    this.intervalID = 0\r\n  }\r\n\r\n  /**\r\n   * this updates our data at our set interval\r\n   */\r\n  componentDidMount() {\r\n    this.updateData()\r\n    this.intervalID = setInterval(this.updateData, 2000)\r\n  }\r\n\r\n  /**\r\n   * this updates our data at our set interval\r\n   */\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID)\r\n  }\r\n\r\n  handlePageClick(data, isUrgent) {\r\n    const selected = data.selected\r\n    const offset = Math.ceil(selected * this.state.itemsPerPage)\r\n    if (isUrgent) {\r\n      this.setState({ urgentOffset: offset })\r\n    } else {\r\n      this.setState({ offset })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates our state variable when called\r\n   */\r\n  async updateData() {\r\n    const result = await fetch('/api/watchlist/list')\r\n    const json = await result.json()\r\n    this.setState({ items: json })\r\n  }\r\n\r\n  async removeItem(item_id) {\r\n    await fetch('/api/watchlist/remove/' + item_id)\r\n  }\r\n\r\n  render() {\r\n    const { items, itemsPerPage, offset, urgentOffset } = this.state\r\n    const totalPages = Math.ceil(items.length / itemsPerPage)\r\n    const urgentItems = items.filter(item => item.is_urgent)\r\n    const totalUrgentPages = Math.ceil(urgentItems.length / itemsPerPage)\r\n\r\n    return (\r\n      <div className=\"container text-center mt-5\">\r\n        <h2 className=\"header\">Urgent Items:</h2>\r\n        <table className=\"table table-bordered table-striped\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Average Price</th>\r\n              <th>Min. Price</th>\r\n              <th>Max. Price</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {urgentItems\r\n              .slice(urgentOffset, urgentOffset + itemsPerPage)\r\n              .map(item => {\r\n                return (\r\n                  <tr key={item.item_id}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.avg_price}</td>\r\n                    <td>{item.min_price}</td>\r\n                    <td>{item.max_price}</td>\r\n                    <td>\r\n                      <p onClick={() => this.removeItem(item.item_id)}>X</p>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })}\r\n          </tbody>\r\n        </table>\r\n        <ReactPaginate\r\n          previousLabel=\"Prev\"\r\n          nextLabel=\"Next\"\r\n          breakLabel=\"...\"\r\n          breakClassName=\"PaginationBreak\"\r\n          pageCount={totalUrgentPages}\r\n          marginPagesDisplayed={1}\r\n          pageRangeDisplayed={5}\r\n          onPageChange={data => {\r\n            this.handlePageClick(data, true)\r\n          }}\r\n          containerClassName=\"Pagination\"\r\n          subContainerClassName=\"PaginationPages Pagination\"\r\n          activeClassName=\"PaginationActive\"\r\n        />\r\n\r\n        <h2 className=\"header\">Watched Items:</h2>\r\n        <table className=\"table table-bordered table-striped\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Average Price</th>\r\n              <th>Min. Price</th>\r\n              <th>Max. Price</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {items.slice(offset, offset + itemsPerPage).map(item => {\r\n              return (\r\n                <tr key={item.item_id}>\r\n                  <td>{item.name}</td>\r\n                  <td>{item.avg_price}</td>\r\n                  <td>{item.min_price}</td>\r\n                  <td>{item.max_price}</td>\r\n                  <td>\r\n                    <p onClick={() => this.removeItem(item.item_id)}>X</p>\r\n                  </td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n\r\n        <ReactPaginate\r\n          previousLabel=\"Prev\"\r\n          nextLabel=\"Next\"\r\n          breakLabel=\"...\"\r\n          breakClassName=\"PaginationBreak\"\r\n          pageCount={totalPages}\r\n          marginPagesDisplayed={1}\r\n          pageRangeDisplayed={5}\r\n          onPageChange={data => {\r\n            this.handlePageClick(data, false)\r\n          }}\r\n          containerClassName=\"Pagination\"\r\n          subContainerClassName=\"PaginationPages Pagination\"\r\n          activeClassName=\"PaginationActive\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WatchList\r\n","import React from 'react'\r\nimport './InfoList.css'\r\n\r\nclass InfoList extends React.Component {\r\n  render () {\r\n    const propsObject = this.props.data\r\n    return (\r\n      <div>\r\n        <div><strong>{propsObject.title}</strong></div>\r\n        <ul>\r\n          {propsObject.data.map((item, i) => {\r\n            return <li key={item + i}>{item}</li>\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default InfoList\r\n","/* eslint-disable */\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './ItemInfo.css'\r\nimport SearchBar from './SearchBar'\r\nimport { VictoryArea, VictoryChart } from 'victory'\r\nimport InfoList from './InfoList'\r\n\r\nclass ItemInfo extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      successfulAPICall: false,\r\n      waiting: true,\r\n      isSingleItem: true,\r\n      item: {},\r\n      itemsInSet: [],\r\n      tradingTax: 0,\r\n      ducats: 0,\r\n      relics: [],\r\n      imgUrl: '',\r\n      itemName: '',\r\n      itemId: ''\r\n    }\r\n    this.intervalID = 0\r\n  }\r\n\r\n  /** This ensures our page does not reload if the current url is the same as the next url,\r\n   * and also makes sure that the loading animation displays if they are different\r\n   * @param {dict} props\r\n   * @return {bool}\r\n   */\r\n  componentWillReceiveProps(newProps) {\r\n    if (this.props.match.params.itemName !== newProps.match.params.itemName) {\r\n      this.setState({ waiting: true })\r\n      clearInterval(this.intervalID)\r\n    }\r\n  }\r\n\r\n  /** After the component updates (page load from \"item info page\"), we grab the search query and convert it to a format that our API can understand\r\n   * @param {dict} props\r\n   */\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.match.params.itemName !== this.props.match.params.itemName) {\r\n      const {\r\n        match: {\r\n          params: { itemName }\r\n        }\r\n      } = this.props\r\n      const itemId = prevProps.match.params.itemName\r\n        .trim()\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .join('_')\r\n      fetch('/api/items/untrack/' + itemId)\r\n      this.retrieveData(itemName)\r\n    }\r\n  }\r\n\r\n  /** After the component mounts (page load from HOME), we grab the search query and convert it to a format that our API can understand\r\n   */\r\n  componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { itemName }\r\n      }\r\n    } = this.props\r\n    this.retrieveData(itemName)\r\n    this.intervalID = setInterval(() => {\r\n      this.retrieveData(itemName)\r\n    }, 2000)\r\n  }\r\n\r\n  /** If the component is being redirected to a new url, we untrack the current item so that stats will not be updated anymore\r\n   */\r\n  componentWillUnmount() {\r\n    const {\r\n      match: {\r\n        params: { itemName }\r\n      }\r\n    } = this.props\r\n    const itemId = itemName\r\n      .trim()\r\n      .toLowerCase()\r\n      .split(' ')\r\n      .join('_')\r\n    fetch('/api/items/untrack/' + itemId)\r\n    clearInterval(this.intervalID)\r\n  }\r\n\r\n  /** This function retrieves data from our flask route that calls to our database held in api.py\r\n   * @param {string} itemName\r\n   */\r\n  async retrieveData(itemName) {\r\n    const itemId = itemName\r\n      .trim()\r\n      .toLowerCase()\r\n      .split(' ')\r\n      .join('_')\r\n\r\n    let isSingleItem = false\r\n    const successfulAPICall = true\r\n\r\n    // Database Call\r\n    const url = '/api/items/' + itemId\r\n    const itemResults = await fetch(url)\r\n\r\n    // if there is a bad search query, we display an error message\r\n    let itemJson = await itemResults.json()\r\n    console.log(itemJson)\r\n    if (itemJson === undefined) {\r\n      this.setState({ successfulAPICall: false, waiting: false })\r\n      return\r\n    }\r\n\r\n    // this allows us to be more descriptive with which items have available stats from the API\r\n    if (\r\n      !itemId.endsWith('_set') &&\r\n      !itemId.includes('lith_') &&\r\n      !itemId.includes('meso_') &&\r\n      !itemId.includes('neo_') &&\r\n      !itemId.includes('axi_')\r\n    ) {\r\n      isSingleItem = true\r\n    }\r\n\r\n    // helper functions\r\n    const avgPrice = this.getAvgPrice(itemJson)\r\n    const minPrice = this.getMinPrice(itemJson)\r\n    const maxPrice = this.getMaxPrice(itemJson)\r\n    const imgUrl = this.getImage(itemJson)\r\n    const relics = this.getRelics(itemJson)\r\n    const tradingTax = this.getTradingTax(itemJson)\r\n    const ducats = this.getDucats(itemJson)\r\n    itemName = this.getItemName(itemJson)\r\n\r\n    // Add items in set data\r\n    const itemsInSet = await Promise.all(\r\n      itemJson.items_in_set.map(async itemId => {\r\n        const url = '/api/items/' + itemId\r\n        const result = await fetch(url)\r\n        const json = await result.json()\r\n        const item = json\r\n        console.log(item)\r\n        return { url: item.item_id, img: item.img_url }\r\n      })\r\n    )\r\n\r\n    this.setState({\r\n      item: itemJson,\r\n      waiting: false,\r\n      itemsInSet,\r\n      successfulAPICall,\r\n      tradingTax,\r\n      ducats,\r\n      relics,\r\n      imgUrl,\r\n      isSingleItem,\r\n      itemName,\r\n      itemId,\r\n      avgPrice,\r\n      minPrice,\r\n      maxPrice\r\n    })\r\n  }\r\n\r\n  getAvgPrice(itemJson) {\r\n    return itemJson.avg_price\r\n  }\r\n\r\n  getMinPrice(itemJson) {\r\n    return itemJson.min_price\r\n  }\r\n\r\n  getMaxPrice(itemJson) {\r\n    return itemJson.max_price\r\n  }\r\n\r\n  getItemName(itemJson) {\r\n    return itemJson.name\r\n  }\r\n\r\n  getImage(itemJson) {\r\n    return itemJson.img_url\r\n  }\r\n\r\n  getRelics(itemJson) {\r\n    return itemJson.relics\r\n  }\r\n\r\n  getTradingTax(itemJson) {\r\n    return itemJson.trading_tax\r\n  }\r\n\r\n  getDucats(itemJson) {\r\n    return itemJson.ducats\r\n  }\r\n\r\n  /** Awaits our backend call to add an item to the watchlist\r\n   * @param {string} itemId\r\n   */\r\n  async addItem(itemId) {\r\n    await fetch('/api/watchlist/add/' + itemId)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.waiting === true) {\r\n      return (\r\n        <div className=\"container h1 text-center mt-5\">\r\n          <h3 className=\"text-info loading\">Loading...</h3>\r\n          <div id=\"loading-bar\">\r\n            <div id=\"progress\" />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    if (this.state.successfulAPICall === false) {\r\n      return (\r\n        <div className=\"container text-center mt-5\">\r\n          <p className=\"h1 text-danger\">\r\n            We could not find the item you requested.\r\n          </p>\r\n          <SearchBar />\r\n        </div>\r\n      )\r\n    } else {\r\n      const chartData = []\r\n      this.state.item.order_history.forEach((order, index) => {\r\n        chartData.push({ x: index + 1, y: order.platinum })\r\n      })\r\n\r\n      // Build my info lists for display\r\n      const pricingData = {\r\n        title: 'Prices:',\r\n        data: [\r\n          'Average Price: ' + this.state.avgPrice,\r\n          'Min Price: ' + this.state.minPrice,\r\n          'Max Price: ' + this.state.maxPrice\r\n        ]\r\n      }\r\n\r\n      const ducatsData = {\r\n        title: 'Ducats:',\r\n        data: [this.state.ducats]\r\n      }\r\n\r\n      const tradingTaxData = {\r\n        title: 'Trading Tax:',\r\n        data: [this.state.tradingTax]\r\n      }\r\n\r\n      const relicNames = []\r\n      this.state.relics.forEach(relic => {\r\n        relicNames.push(relic.name)\r\n      })\r\n      const relicsData = {\r\n        title: 'Aquisition:',\r\n        data: relicNames\r\n      }\r\n\r\n      return (\r\n        <div className=\"ItemInfoContainer\">\r\n          <SearchBar />\r\n          <h2 className=\"ItemName\">{this.state.itemName}</h2>\r\n          <img className=\"ItemImage\" src={this.state.imgUrl} alt=\"Item\" />\r\n          <div className=\"ItemsInSet row w-50 justify-content-around\">\r\n            {this.state.itemsInSet.map(item => {\r\n              return (\r\n                <Link className=\"SetItemLink\" to={'/items/' + item.url}>\r\n                  <img\r\n                    width=\"64\"\r\n                    height=\"64\"\r\n                    src={item.img}\r\n                    alt=\"Item in set\"\r\n                  />\r\n                </Link>\r\n              )\r\n            })}\r\n          </div>\r\n          <button\r\n            className=\"btn btn-info\"\r\n            onClick={() => this.addItem(this.state.itemId)}\r\n          >\r\n            Add Item to Watch List\r\n          </button>\r\n          {this.state.successfulAPICall && (\r\n            <div className=\"container data-container\">\r\n              {this.state.ducats > -1 && <InfoList data={ducatsData} />}\r\n              <InfoList data={pricingData} />\r\n              {this.state.tradingTax > -1 && <InfoList data={tradingTaxData} />}\r\n              {this.state.relics.length > 0 && <InfoList data={relicsData} />}\r\n            </div>\r\n          )}\r\n          {chartData.length > 1 && (\r\n            <div className=\"VictoryLineContainer\">\r\n              <VictoryChart>\r\n                <VictoryArea\r\n                  style={{\r\n                    data: {\r\n                      fill: '#c43a31',\r\n                      fillOpacity: 0.7,\r\n                      stroke: '#c43a31',\r\n                      strokeWidth: 3\r\n                    },\r\n                    labels: {\r\n                      fontSize: 15,\r\n                      fill: ({ datum }) =>\r\n                        datum.x === 3 ? '#000000' : '#c43a31'\r\n                    }\r\n                  }}\r\n                  data={chartData}\r\n                  labels={({ datum }) => {\r\n                    return datum.x % 2 === 0 ? datum.y : ''\r\n                  }}\r\n                />\r\n              </VictoryChart>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default ItemInfo\r\n","import './App.css'\r\nimport './bootstrap.min.css'\r\nimport React from 'react'\r\nimport { HashRouter as Router, Route } from 'react-router-dom'\r\nimport Footer from './Footer'\r\nimport Header from './Header'\r\nimport SearchPage from './SearchPage'\r\nimport WatchList from './WatchList'\r\nimport ItemInfo from './ItemInfo'\r\n\r\nfunction App () {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <Route exact path='/' component={SearchPage} />\r\n      <Route path='/watchlist' component={WatchList} />\r\n      <Route path='/items/:itemName' component={ItemInfo} />\r\n      <Footer />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}