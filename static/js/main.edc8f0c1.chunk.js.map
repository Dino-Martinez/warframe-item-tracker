{"version":3,"sources":["Footer.js","Header.js","img/search-icon.png","SearchBar.js","SearchPage.js","WatchList.js","InfoList.js","ItemInfo.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","React","Component","Header","className","activeClassName","exact","to","item_list","getSuggestions","value","console","log","inputValue","trim","toLowerCase","inputLength","length","filter","item","name","slice","getSuggestionValue","suggestion","renderSuggestion","SearchBar","updateQuery","event","newValue","setState","query","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","enterPressed","onChange","replace","bind","handleKeyDown","retrieveAllItems","window","addEventListener","this","prevProps","prevState","fetch","result","json","keyCode","which","newQuery","location","href","substring","props","history","push","inputProps","placeholder","src","icon","height","width","alt","withRouter","SearchPage","WatchList","intervalID","items","itemsPerPage","offset","urgentOffset","updateData","removeItem","handlePageClick","setInterval","clearInterval","data","isUrgent","selected","Math","ceil","item_id","totalPages","urgentItems","is_urgent","totalUrgentPages","map","avg_price","min_price","max_price","onClick","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","InfoList","propsObject","title","i","ItemInfo","successfulAPICall","waiting","isSingleItem","itemsInSet","tradingTax","ducats","relics","imgUrl","itemName","itemId","newProps","match","params","split","join","retrieveData","url","itemResults","undefined","itemJson","shift","endsWith","includes","avgPrice","getAvgPrice","minPrice","getMinPrice","maxPrice","getMaxPrice","getImage","getRelics","getTradingTax","getDucats","getItemName","Promise","all","items_in_set","a","img","img_url","trading_tax","id","chartData","order_history","forEach","order","index","x","y","platinum","pricingData","ducatsData","tradingTaxData","relicNames","relic","relicsData","addItem","style","fill","fillOpacity","stroke","strokeWidth","labels","fontSize","datum","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6dASeA,G,8KAJX,OAAO,4B,GAFUC,IAAMC,YCkBZC,G,8KAfX,OACA,qBAAKC,UAAU,6BAAf,SACE,qBAAIA,UAAU,aAAd,UACE,oBAAIA,UAAU,WAAd,SACA,cAAC,IAAD,CAASA,UAAU,WAAWC,gBAAgB,cAAcC,OAAK,EAACC,GAAG,IAArE,oBAEA,oBAAIH,UAAU,WAAd,SACA,cAAC,IAAD,CAASA,UAAU,WAAWC,gBAAgB,cAAcE,GAAG,aAA/D,mC,GATaN,IAAMC,Y,0CCJZ,G,OAAA,IAA0B,yC,kBCMrCM,EAAY,GAEVC,EAAkB,SAACC,GAEvB,GADAC,QAAQC,IAAIF,IACRA,EAAO,MAAO,GAClB,IAAMG,EAAaH,EAAMI,OAAOC,cAC1BC,EAAcH,EAAWI,OAE/B,OAAuB,IAAhBD,EAAoB,GAAKR,EAAUU,QAAO,SAAAC,GAAI,OACnDA,EAAKC,KAAKL,cAAcM,MAAM,EAAGL,KAAiBH,KAClDQ,MAAM,EAAG,IAMPC,EAAsB,SAACC,GAAD,OAAgBA,EAAWH,MAKjDI,EAAoB,SAACD,GAAD,OACxB,qBAAKnB,UAAU,aAAf,SAA8BmB,EAAWH,QAKrCK,E,kDACJ,aAAe,IAAD,8BACZ,gBA4CFC,YAAc,SAACC,EAAD,GAAwB,IAAfC,EAAc,EAAdA,SACrB,EAAKC,SAAS,CAAEC,MAAOF,KA9CX,EAoDdG,4BAA8B,YAAc,IAAZrB,EAAW,EAAXA,MAC9B,EAAKmB,SAAS,CAAEG,YAAcvB,EAAeC,MArDjC,EA0DduB,4BAA8B,WAC5B,EAAKJ,SAAS,CAAEG,YAAc,MAzD9B,EAAKE,MAAQ,CACXxB,MAAO,GACPyB,cAAc,EACdH,YAAa,IAGf,EAAKI,SAAW,SAACT,EAAD,GAAwB,IAAfC,EAAc,EAAdA,SACvBA,EAAWA,EAASS,QAAQ,IAAI,OAChC,EAAKR,SAAS,CAAEnB,MAAOkB,KAEzB,EAAKF,YAAc,EAAKA,YAAYY,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,mBAdO,E,gEAkBZC,OAAOC,iBAAiB,UAAWC,KAAKJ,iB,yCAGvBK,EAAWC,GACzBA,EAAUV,eAAiBQ,KAAKT,MAAMC,cACvCQ,KAAKd,SAAS,CAAEM,cAAc,M,2KAKXW,MAAM,c,cAArBC,E,gBACaA,EAAOC,O,OAApBA,E,OACNxC,EAAYwC,E,qIAMArB,GAEC,MADCA,EAAMsB,QAAUtB,EAAMsB,QAAUtB,EAAMuB,QAElDP,KAAKd,SAAS,CAAEM,cAAc,M,+BAwBhC,IACMgB,EADMV,OAAOW,SAASC,KACPC,UAAU,IAFxB,EAGsCX,KAAKT,MAA1CxB,EAHD,EAGCA,MAAOyB,EAHR,EAGQA,aAAcH,EAHtB,EAGsBA,YAE1BG,GAAgBzB,GAASA,IAAUyC,GAA6B,KAAjBzC,EAAMI,QACtD6B,KAAKY,MAAMC,QAAQC,KAAK,UAAY/C,GAGtC,IAAMgD,EAAa,CACjBC,YAAa,kBACbjD,QACA0B,SAAUO,KAAKP,UAEjB,OACE,8BACE,sBAAKhC,UAAU,kCAAf,UACE,cAAC,IAAD,CACE4B,YAAaA,EACbD,4BAA6BY,KAAKZ,4BAClCE,4BAA6BU,KAAKV,4BAClCX,mBAAoBA,EACpBE,iBAAkBA,EAClBkC,WAAYA,IAEd,cAAC,IAAD,CAAMnD,GAAI,UAAYG,EAAtB,SAA8B,qBAAKkD,IAAKC,EAAMC,OAAO,KAAKC,MAAM,KAAKC,IAAI,6B,GAxF3D/D,IAAMC,WAgGf+D,cAAWxC,GChHXyC,E,uKATX,OACE,gCACE,oBAAI9D,UAAU,YAAd,8BACA,cAAC,EAAD,W,GALiBH,IAAMC,W,2BCoJhBiE,E,kDApJb,aAAe,IAAD,8BACZ,gBAFFC,WAAa,EAGX,EAAKlC,MAAQ,CACXmC,MAAO,GACPC,aAAc,EACdC,OAAQ,EACRC,aAAc,GAEhB,EAAKC,WAAa,EAAKA,WAAWnC,KAAhB,gBAClB,EAAKoC,WAAa,EAAKA,WAAWpC,KAAhB,gBAClB,EAAKqC,gBAAkB,EAAKA,gBAAgBrC,KAArB,gBAVX,E,gEAiBZK,KAAK8B,aACL9B,KAAKyB,WAAaQ,YAAYjC,KAAK8B,WAAY,O,6CAO/CI,cAAclC,KAAKyB,c,sCAGLU,EAAMC,GACpB,IAAMC,EAAWF,EAAKE,SAChBT,EAASU,KAAKC,KAAKF,EAAWrC,KAAKT,MAAMoC,cAC3CS,EACApC,KAAKd,SAAS,CAAC2C,aAAcD,IAE7B5B,KAAKd,SAAS,CAAC0C,a,qKASEzB,MAAM,uB,cAArBC,E,gBACaA,EAAOC,O,OAApBA,E,OACNL,KAAKd,SAAS,CAAEwC,MAAOrB,I,gLAGRmC,G,iFACTrC,MAAM,yBAA2BqC,G,iIAG/B,IAAD,SAC6CxC,KAAKT,MAAlDmC,EADA,EACAA,MAAOC,EADP,EACOA,aAAcC,EADrB,EACqBA,OAAQC,EAD7B,EAC6BA,aAC9BY,EAAaH,KAAKC,KAAKb,EAAMpD,OAASqD,GACtCe,EAAchB,EAAMnD,QAAO,SAACC,GAAD,OAAUA,EAAKmE,aAC1CC,EAAmBN,KAAKC,KAAKG,EAAYpE,OAASqD,GAExD,OACE,sBAAKlE,UAAU,6BAAf,UACE,oBAAIA,UAAU,SAAd,2BACA,wBAAOA,UAAU,qCAAjB,UACE,uBAAOA,UAAU,aAAjB,SACE,+BACE,sCACA,+CACA,4CACA,4CACA,4BAGJ,gCAEEiF,EAAYhE,MAAMmD,EAAcA,EAAeF,GAAckB,KAAI,SAACrE,GAChE,OACE,+BACE,6BAAKA,EAAKC,OACV,6BAAKD,EAAKsE,YACV,6BAAKtE,EAAKuE,YACV,6BAAKvE,EAAKwE,YACV,6BAAI,mBAAGC,QAAS,kBAAM,EAAKlB,WAAWvD,EAAKgE,UAAvC,mBALGhE,EAAKgE,iBAYtB,cAAC,IAAD,CACEU,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,kBAChBC,UAAWV,EACXW,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAc,SAACtB,GAAU,EAAKH,gBAAgBG,GAAM,IACpDuB,mBAAoB,aACpBC,sBAAuB,6BACvBjG,gBAAiB,qBAInB,oBAAID,UAAU,SAAd,4BACA,wBAAOA,UAAU,qCAAjB,UACE,uBAAOA,UAAU,aAAjB,SACE,+BACE,sCACA,+CACA,4CACA,4CACA,4BAGJ,gCAEEiE,EAAMhD,MAAMkD,EAAQA,EAASD,GAAckB,KAAI,SAACrE,GAC9C,OACE,+BACE,6BAAKA,EAAKC,OACV,6BAAKD,EAAKsE,YACV,6BAAKtE,EAAKuE,YACV,6BAAKvE,EAAKwE,YACV,6BAAI,mBAAGC,QAAS,kBAAM,EAAKlB,WAAWvD,EAAKgE,UAAvC,mBALGhE,EAAKgE,iBAatB,cAAC,IAAD,CACEU,cAAe,OACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,kBAChBC,UAAWb,EACXc,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAc,SAACtB,GAAU,EAAKH,gBAAgBG,GAAM,IACpDuB,mBAAoB,aACpBC,sBAAuB,6BACvBjG,gBAAiB,4B,GA/IHJ,IAAMC,W,2BCefqG,G,8KAdX,IAAMC,EAAc7D,KAAKY,MAAMuB,KAC/B,OACE,gCACE,8BAAK,iCAAS0B,EAAYC,UAC1B,6BACGD,EAAY1B,KAAKU,KAAK,SAACrE,EAAMuF,GAC5B,OAAO,6BAAqBvF,GAAXA,EAAOuF,e,GARbzG,IAAMC,YCgRdyG,E,kDA1Qb,aAAe,IAAD,8BACZ,gBAFFvC,WAAa,EAGX,EAAKlC,MAAQ,CACX0E,mBAAmB,EACnBC,SAAS,EACTC,cAAc,EACd3F,KAAM,GACN4F,WAAY,GACZC,WAAY,EACZC,OAAQ,EACRC,OAAQ,GACRC,OAAQ,GACRC,SAAU,GACVC,OAAQ,IAbE,E,sEAsBYC,GACpB3E,KAAKY,MAAMgE,MAAMC,OAAOJ,WAAaE,EAASC,MAAMC,OAAOJ,WAC7DzE,KAAKd,SAAS,CAACgF,SAAS,IACxBhC,cAAclC,KAAKyB,e,yCAQJxB,GACjB,GAAGA,EAAU2E,MAAMC,OAAOJ,WAAazE,KAAKY,MAAMgE,MAAMC,OAAOJ,SAAU,CAAC,IAC7CA,EAAiBzE,KAAKY,MAAzCgE,MAASC,OAAUJ,SACrBC,EAASzE,EAAU2E,MAAMC,OAAOJ,SAAStG,OAAOC,cAAc0G,MAAM,KAAKC,KAAK,KACpF5E,MAAM,sBAAwBuE,GAC9B1E,KAAKgF,aAAaP,M,0CAMD,IAAD,OACSA,EAAiBzE,KAAKY,MAAzCgE,MAASC,OAAUJ,SAC3BzE,KAAKgF,aAAaP,GAClBzE,KAAKyB,WAAaQ,aAAa,WAC7B,EAAK+C,aAAaP,KAAY,O,6CAKV,IAEhBC,EADsC1E,KAAKY,MAAzCgE,MAASC,OAAUJ,SACHtG,OAAOC,cAAc0G,MAAM,KAAKC,KAAK,KAC7D5E,MAAM,sBAAwBuE,GAC9BxC,cAAclC,KAAKyB,c,4EAKFgD,G,wGACXC,EAASD,EAAStG,OAAOC,cAAc0G,MAAM,KAAKC,KAAK,KAEzDZ,GAAe,EACfF,GAAoB,EAGlBgB,EAAM,cAAgBP,E,SACFvE,MAAM8E,G,cAA1BC,E,gBAIeA,EAAY7E,O,eAEhB8E,KADjBC,GADIA,E,QACgBC,S,wBAElBrF,KAAKd,SAAS,CAAC+E,mBAAmB,EAAOC,SAAQ,I,kCAK9CQ,EAAOY,SAAS,SAAaZ,EAAOa,SAAS,UAAeb,EAAOa,SAAS,UAAeb,EAAOa,SAAS,SAAcb,EAAOa,SAAS,UAC5IpB,GAAe,GAIXqB,EAAWxF,KAAKyF,YAAYL,GAC5BM,EAAW1F,KAAK2F,YAAYP,GAC5BQ,EAAW5F,KAAK6F,YAAYT,GAC5BZ,EAASxE,KAAK8F,SAASV,GACvBb,EAASvE,KAAK+F,UAAUX,GACxBf,EAAarE,KAAKgG,cAAcZ,GAChCd,EAAStE,KAAKiG,UAAUb,GAC9BX,EAAWzE,KAAKkG,YAAYd,G,UAGHe,QAAQC,IAAIhB,EAASiB,aAAaxD,IAAtB,uCAA0B,WAAO6B,GAAP,qBAAA4B,EAAA,6DACvDrB,EAAM,cAAgBP,EADiC,SAExCvE,MAAM8E,GAFkC,cAEvD7E,EAFuD,gBAG1CA,EAAOC,OAHmC,cAGvDA,EAHuD,OAIvD7B,EAAO6B,EAAKgF,QAJ2C,kBAKtD,CAACJ,IAAKzG,EAAKgE,QAAS+D,IAAK/H,EAAKgI,UALwB,2CAA1B,wD,QAA/BpC,E,OAQNpE,KAAKd,SAAS,CAACV,KAAO4G,EAAUlB,SAAS,EAAOE,aAAYH,oBAAmBI,aAAYC,SAAQC,SAAQC,SAAQL,eAAcM,WAAUC,SAAQc,WAAUE,WAAUE,a,0IAI7JR,GACV,OAAOA,EAAStC,Y,kCAGNsC,GACV,OAAOA,EAASrC,Y,kCAGNqC,GACV,OAAOA,EAASpC,Y,kCAGNoC,GACV,OAAOA,EAAS3G,O,+BAGT2G,GACP,OAAOA,EAASoB,U,gCAGRpB,GACR,OAAOA,EAASb,S,oCAGJa,GACZ,OAAOA,EAASqB,c,gCAGRrB,GACR,OAAOA,EAASd,S,uEAMJI,G,iFACNvE,MAAM,sBAAwBuE,G,iIAG5B,IAAD,OACP,IAA2B,IAAvB1E,KAAKT,MAAM2E,QACb,OACE,sBAAKzG,UAAU,gCAAf,UACE,oBAAIA,UAAU,oBAAd,wBACA,qBAAKiJ,GAAG,cAAR,SAAsB,qBAAKA,GAAG,kBAIpC,IAAqC,IAAjC1G,KAAKT,MAAM0E,kBACb,OACE,sBAAKxG,UAAU,6BAAf,UACE,mBAAGA,UAAU,iBAAb,uDACA,cAAC,EAAD,OAKJ,IAAMkJ,EAAY,GAClB3G,KAAKT,MAAMf,KAAKoI,cAAcC,SAAQ,SAACC,EAAOC,GAC5CJ,EAAU7F,KAAK,CAACkG,EAAGD,EAAQ,EAAGE,EAAGH,EAAMI,cAIzC,IAAMC,EAAc,CAClBrD,MAAO,UACP3B,KAAM,CACJ,kBAAoBnC,KAAKT,MAAMiG,SAC/B,cAAgBxF,KAAKT,MAAMmG,SAC3B,cAAgB1F,KAAKT,MAAMqG,WAIzBwB,EAAa,CACjBtD,MAAO,UACP3B,KAAM,CACJnC,KAAKT,MAAM+E,SAIT+C,EAAiB,CACrBvD,MAAO,eACP3B,KAAM,CACJnC,KAAKT,MAAM8E,aAITiD,EAAa,GACnBtH,KAAKT,MAAMgF,OAAOsC,SAAU,SAACU,GAC3BD,EAAWxG,KAAKyG,EAAM9I,SAExB,IAAM+I,EAAa,CACjB1D,MAAO,cACP3B,KAAMmF,GAGR,OACE,sBAAK7J,UAAU,oBAAf,UACE,cAAC,EAAD,IACA,oBAAIA,UAAU,WAAd,SAA0BuC,KAAKT,MAAMkF,WACrC,qBAAKhH,UAAU,YAAYwD,IAAKjB,KAAKT,MAAMiF,OAAQnD,IAAI,SACvD,qBAAK5D,UAAU,6CAAf,SAEIuC,KAAKT,MAAM6E,WAAWvB,KAAI,SAACrE,GACzB,OACE,cAAC,IAAD,CAAMf,UAAU,cAAcG,GAAI,UAAYY,EAAKyG,IAAnD,SAAwD,qBAAK7D,MAAM,KAAKD,OAAO,KAAKF,IAAKzC,EAAK+H,IAAKlF,IAAI,uBAK/G,wBAAQ5D,UAAU,eAAewF,QAAS,kBAAM,EAAKwE,QAAQ,EAAKlI,MAAMmF,SAAxE,oCACC1E,KAAKT,MAAM0E,mBAEV,sBAAKxG,UAAU,2BAAf,UACGuC,KAAKT,MAAM+E,QAAU,GAEtB,cAAC,EAAD,CAAUnC,KAAMiF,IAEhB,cAAC,EAAD,CAAUjF,KAAMgF,IACfnH,KAAKT,MAAM8E,YAAc,GAExB,cAAC,EAAD,CAAUlC,KAAMkF,IAEjBrH,KAAKT,MAAMgF,OAAOjG,OAAS,GAE1B,cAAC,EAAD,CAAU6D,KAAMqF,OAIrBb,EAAUrI,OAAS,GAEhB,qBAAKb,UAAU,uBAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEiK,MAAO,CACLvF,KAAM,CACJwF,KAAM,UAAWC,YAAa,GAAKC,OAAQ,UAAWC,YAAa,GAErEC,OAAQ,CACNC,SAAU,GACVL,KAAM,mBAA2B,IAA3B,EAAGM,MAAkBjB,EAAU,UAAY,aAGrD7E,KAAMwE,EACNoB,OAAQ,YAAgB,IAAbE,EAAY,EAAZA,MACT,OAAOA,EAAMjB,EAAI,IAAM,EAAIiB,EAAMhB,EAAI,iB,GA/PpC3J,IAAMC,WCed2K,MAZf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOvK,OAAK,EAACwK,KAAK,IAAIC,UAAW7G,IACjC,cAAC,IAAD,CAAO4G,KAAK,aAAaC,UAAW5G,IACpC,cAAC,IAAD,CAAO2G,KAAK,mBAAmBC,UAAWpE,IAC1C,cAAC,EAAD,QCLSqE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.edc8f0c1.chunk.js","sourcesContent":["import React from 'react';\nimport './Footer.css';\n\nclass Footer extends React.Component {\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport './Header.css';\nimport {NavLink} from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" activeClassName=\"text-danger\" exact to=\"/\">HOME</NavLink>\n        </li>\n        <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" activeClassName=\"text-danger\" to=\"/watchlist\">WATCH LIST</NavLink>\n        </li>\n      </ul>\n    </nav>\n    );\n  }\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/search-icon.afde00ab.png\";","import React from 'react';\nimport './SearchBar.css';\nimport { Link, withRouter } from 'react-router-dom';\nimport icon from './img/search-icon.png';\nimport Autosuggest from 'react-autosuggest'\n\nlet item_list = {}\n\nconst getSuggestions = ((value) => {\n  console.log(value)\n  if(!value) return []\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : item_list.filter(item =>\n    item.name.toLowerCase().slice(0, inputLength) === inputValue\n  ).slice(0, 6);\n});\n\n/** This function returns the value that should be displayed by a suggestion\n  * @param {string} suggestion\n  */\nconst getSuggestionValue = ((suggestion) => suggestion.name)\n\n/** This function renders a single suggestion in our autosuggest\n  * @param {string} suggestion\n  */\nconst renderSuggestion = ((suggestion) => (\n  <div className=\"suggestion\" >{suggestion.name}</div>\n))\n\n/** This class will represent our Search Bar, with autosuggest functionality\n  */\nclass SearchBar extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      enterPressed: false,\n      suggestions: [],\n    };\n\n    this.onChange = (event, {newValue}) => {\n      newValue = newValue.replace(\"&\",\"and\")\n      this.setState({ value: newValue });\n    }\n    this.updateQuery = this.updateQuery.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.retrieveAllItems()\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevState.enterPressed !== this.state.enterPressed) {\n      this.setState({ enterPressed: false })\n    }\n  }\n\n  async retrieveAllItems() {\n    const result = await fetch('/api/items');\n    const json = await result.json();\n    item_list = json\n  }\n\n  /** This handler submits our query when the enter key is pressed\n    * @param {KeyPressedEvent} event\n    */\n  handleKeyDown(event) {\n    const code = (event.keyCode ? event.keyCode : event.which);\n    if (code === 13) {\n      this.setState({ enterPressed: true });\n    }\n  }\n  /** This function updates our query based on current input\n    * @param {event} event\n    */\n  updateQuery = (event, {newValue}) => {\n    this.setState({ query: newValue });\n  }\n\n  /** This function updates our state with the list of suggestions based on current input\n    * @param {string} value\n    */\n  onSuggestionsFetchRequested = ({value}) => {\n    this.setState({ suggestions : getSuggestions(value) })\n  }\n\n  /** This function clears the suggestions when we click out of the search bar\n    */\n  onSuggestionsClearRequested = () => {\n    this.setState({ suggestions : [] })\n  }\n\n  render() {\n    const url = window.location.href;\n    const newQuery = url.substring(30);\n    const { value, enterPressed, suggestions } = this.state;\n\n    if(enterPressed && value && value !== newQuery && value.trim() !== \"\") {\n      this.props.history.push(\"/items/\" + value);\n    }\n\n    const inputProps = {\n      placeholder: \"Search and Item\",\n      value,\n      onChange: this.onChange\n    }\n    return(\n      <div>\n        <div className=\"jumbotron autosuggest-container\">\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n          />\n          <Link to={\"/items/\" + value} ><img src={icon} height=\"30\" width=\"30\" alt=\"Search Button\"></img></Link>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default withRouter(SearchBar);\n","import React from 'react';\nimport './SearchPage.css';\nimport SearchBar from './SearchBar';\n\n\n\nclass SearchPage extends React.Component {\n  render() {\n    return(\n      <div>\n        <h1 className=\"jumbotron\">Warframe Tracker</h1>\n        <SearchBar />\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React from 'react';\nimport './WatchList.css';\nimport ReactPaginate from 'react-paginate';\n\nclass WatchList extends React.Component {\n  intervalID = 0;\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      itemsPerPage: 5,\n      offset: 0,\n      urgentOffset: 0,\n    };\n    this.updateData = this.updateData.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  /**\n   * this updates our data at our set interval\n   */\n  componentDidMount() {\n    this.updateData();\n    this.intervalID = setInterval(this.updateData, 2000);\n  }\n\n  /**\n   * this updates our data at our set interval\n   */\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  handlePageClick(data, isUrgent) {\n    const selected = data.selected;\n    const offset = Math.ceil(selected * this.state.itemsPerPage);;\n    if (isUrgent) {\n        this.setState({urgentOffset: offset});\n    } else {\n        this.setState({offset});\n    }\n  }\n\n  /**\n    * Updates our state variable when called\n    */\n  async updateData() {\n\n    const result = await fetch('/api/watchlist/list');\n    const json = await result.json();\n    this.setState({ items: json });\n  }\n\n  async removeItem(item_id) {\n    await fetch('/api/watchlist/remove/' + item_id);\n  }\n\n  render() {\n    const {items, itemsPerPage, offset, urgentOffset} = this.state;\n    const totalPages = Math.ceil(items.length / itemsPerPage);\n    const urgentItems = items.filter((item) => item.is_urgent);\n    const totalUrgentPages = Math.ceil(urgentItems.length / itemsPerPage);\n\n    return (\n      <div className=\"container text-center mt-5\">\n        <h2 className=\"header\">Urgent Items:</h2>\n        <table className=\"table table-bordered table-striped\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Name</th>\n              <th>Average Price</th>\n              <th>Min. Price</th>\n              <th>Max. Price</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n            urgentItems.slice(urgentOffset, urgentOffset + itemsPerPage).map((item) => {\n              return (\n                <tr key={item.item_id}>\n                  <td>{item.name}</td>\n                  <td>{item.avg_price}</td>\n                  <td>{item.min_price}</td>\n                  <td>{item.max_price}</td>\n                  <td><p onClick={() => this.removeItem(item.item_id)}>X</p></td>\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n        <ReactPaginate\n          previousLabel={'Prev'}\n          nextLabel={'Next'}\n          breakLabel={'...'}\n          breakClassName={'PaginationBreak'}\n          pageCount={totalUrgentPages}\n          marginPagesDisplayed={1}\n          pageRangeDisplayed={5}\n          onPageChange={(data) => {this.handlePageClick(data, true) } }\n          containerClassName={'Pagination'}\n          subContainerClassName={'PaginationPages Pagination'}\n          activeClassName={'PaginationActive'}\n        />\n\n\n        <h2 className=\"header\">Watched Items:</h2>\n        <table className=\"table table-bordered table-striped\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Name</th>\n              <th>Average Price</th>\n              <th>Min. Price</th>\n              <th>Max. Price</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n            items.slice(offset, offset + itemsPerPage).map((item) => {\n              return (\n                <tr key={item.item_id}>\n                  <td>{item.name}</td>\n                  <td>{item.avg_price}</td>\n                  <td>{item.min_price}</td>\n                  <td>{item.max_price}</td>\n                  <td><p onClick={() => this.removeItem(item.item_id)}>X</p></td>\n                </tr>\n              )\n            })\n          }\n          </tbody>\n        </table>\n\n        <ReactPaginate\n          previousLabel={'Prev'}\n          nextLabel={'Next'}\n          breakLabel={'...'}\n          breakClassName={'PaginationBreak'}\n          pageCount={totalPages}\n          marginPagesDisplayed={1}\n          pageRangeDisplayed={5}\n          onPageChange={(data) => {this.handlePageClick(data, false) }}\n          containerClassName={'Pagination'}\n          subContainerClassName={'PaginationPages Pagination'}\n          activeClassName={'PaginationActive'}\n        />\n      </div>\n    );\n  }\n}\n\nexport default WatchList;\n","import React from 'react';\nimport './InfoList.css';\n\nclass InfoList extends React.Component {\n  render() {\n    const propsObject = this.props.data\n    return (\n      <div>\n        <div><strong>{propsObject.title}</strong></div>\n        <ul>\n         { propsObject.data.map( (item, i) => {\n            return <li key ={item + i}>{item}</li>\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default InfoList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './ItemInfo.css';\nimport SearchBar from './SearchBar';\nimport { VictoryArea, VictoryChart } from 'victory';\nimport InfoList from './InfoList';\n\nclass ItemInfo extends React.Component {\n  intervalID = 0;\n  constructor() {\n    super();\n    this.state = {\n      successfulAPICall: false,\n      waiting: true,\n      isSingleItem: true,\n      item: {},\n      itemsInSet: [],\n      tradingTax: 0,\n      ducats: 0,\n      relics: [],\n      imgUrl: \"\",\n      itemName: \"\",\n      itemId: \"\",\n    };\n  }\n\n  /** This ensures our page does not reload if the current url is the same as the next url,\n    * and also makes sure that the loading animation displays if they are different\n    * @param {dict} props\n    * @return {bool}\n    */\n  componentWillReceiveProps(newProps) {\n    if (this.props.match.params.itemName !== newProps.match.params.itemName) {\n      this.setState({waiting: true})\n      clearInterval(this.intervalID)\n    }\n  }\n\n  /** After the component updates (page load from \"item info page\"), we grab the search query and convert it to a format that our API can understand\n    * @param {dict} props\n    */\n\n  componentDidUpdate(prevProps) {\n    if(prevProps.match.params.itemName !== this.props.match.params.itemName) {\n      const { match: { params: { itemName } } } = this.props;\n      const itemId = prevProps.match.params.itemName.trim().toLowerCase().split(\" \").join(\"_\");\n      fetch('/api/items/untrack/' + itemId)\n      this.retrieveData(itemName);\n    }\n  }\n\n  /** After the component mounts (page load from HOME), we grab the search query and convert it to a format that our API can understand\n    */\n  componentDidMount() {\n    const { match: { params: { itemName } } } = this.props;\n    this.retrieveData(itemName);\n    this.intervalID = setInterval( () => {\n      this.retrieveData(itemName)}, 2000);\n  }\n\n  /** If the component is being redirected to a new url, we untrack the current item so that stats will not be updated anymore\n    */\n  componentWillUnmount() {\n    const { match: { params: { itemName } } } = this.props;\n    const itemId = itemName.trim().toLowerCase().split(\" \").join(\"_\");\n    fetch('/api/items/untrack/' + itemId)\n    clearInterval(this.intervalID)\n  }\n  /** This function retrieves data from our flask route that calls to our database held in api.py\n    * @param {string} itemName\n    */\n  async retrieveData(itemName) {\n    const itemId = itemName.trim().toLowerCase().split(\" \").join(\"_\");\n\n    let isSingleItem = false;\n    let successfulAPICall = true;\n\n    // Database Call\n    const url = \"/api/items/\" + itemId;\n    const itemResults = await fetch(url);\n\n\n    //if there is a bad search query, we display an error message\n    let itemJson = await itemResults.json()\n    itemJson = itemJson.shift()\n    if (itemJson === undefined) {\n      this.setState({successfulAPICall: false, waiting:false})\n      return\n    }\n\n    // this allows us to be more descriptive with which items have available stats from the API\n    if (!itemId.endsWith(\"_set\") && (!itemId.includes(\"lith_\")) && (!itemId.includes(\"meso_\")) && (!itemId.includes(\"neo_\")) && (!itemId.includes(\"axi_\"))) {\n      isSingleItem = true;\n    }\n\n    // helper functions\n    const avgPrice = this.getAvgPrice(itemJson);\n    const minPrice = this.getMinPrice(itemJson);\n    const maxPrice = this.getMaxPrice(itemJson);\n    const imgUrl = this.getImage(itemJson);\n    const relics = this.getRelics(itemJson);\n    const tradingTax = this.getTradingTax(itemJson);\n    const ducats = this.getDucats(itemJson);\n    itemName = this.getItemName(itemJson);\n\n    // Add items in set data\n    const itemsInSet = await Promise.all(itemJson.items_in_set.map(async (itemId) => {\n      const url = \"/api/items/\" + itemId;\n      const result = await fetch(url);\n      const json = await result.json();\n      const item = json.shift();\n      return {url: item.item_id, img: item.img_url};\n    }));\n\n    this.setState({item : itemJson, waiting: false, itemsInSet, successfulAPICall, tradingTax, ducats, relics, imgUrl, isSingleItem, itemName, itemId, avgPrice, minPrice, maxPrice});\n\n  }\n\n  getAvgPrice(itemJson) {\n    return itemJson.avg_price\n  }\n\n  getMinPrice(itemJson) {\n    return itemJson.min_price\n  }\n\n  getMaxPrice(itemJson) {\n    return itemJson.max_price\n  }\n\n  getItemName(itemJson) {\n    return itemJson.name\n  }\n\n  getImage(itemJson) {\n    return itemJson.img_url\n  }\n\n  getRelics(itemJson) {\n    return itemJson.relics;\n  }\n\n  getTradingTax(itemJson) {\n    return itemJson.trading_tax;\n  }\n\n  getDucats(itemJson) {\n    return itemJson.ducats\n  }\n\n  /** Awaits our backend call to add an item to the watchlist\n    * @param {string} itemId\n    */\n  async addItem(itemId) {\n    await fetch('/api/watchlist/add/' + itemId)\n  }\n\n  render() {\n    if (this.state.waiting === true) {\n      return (\n        <div className=\"container h1 text-center mt-5\">\n          <h3 className=\"text-info loading\">Loading...</h3>\n          <div id=\"loading-bar\"><div id=\"progress\"></div></div>\n        </div>\n      )\n    }\n    if (this.state.successfulAPICall === false) {\n      return (\n        <div className=\"container text-center mt-5\">\n          <p className=\"h1 text-danger\">We could not find the item you requested.</p>\n          <SearchBar />\n        </div>\n      );\n    }\n    else {\n      const chartData = [];\n      this.state.item.order_history.forEach((order, index) => {\n        chartData.push({x: index + 1, y: order.platinum});\n      });\n\n      // Build my info lists for display\n      const pricingData = {\n        title: \"Prices:\",\n        data: [\n          \"Average Price: \" + this.state.avgPrice,\n          \"Min Price: \" + this.state.minPrice,\n          \"Max Price: \" + this.state.maxPrice,\n        ]\n      };\n\n      const ducatsData = {\n        title: \"Ducats:\",\n        data: [\n          this.state.ducats,\n        ]\n      };\n\n      const tradingTaxData = {\n        title: \"Trading Tax:\",\n        data: [\n          this.state.tradingTax,\n        ]\n      };\n\n      const relicNames = []\n      this.state.relics.forEach ( (relic) => {\n        relicNames.push(relic.name)\n      })\n      const relicsData = {\n        title: \"Aquisition:\",\n        data: relicNames,\n      };\n\n      return (\n        <div className=\"ItemInfoContainer\">\n          <SearchBar />\n          <h2 className=\"ItemName\">{this.state.itemName}</h2>\n          <img className=\"ItemImage\" src={this.state.imgUrl} alt=\"Item\"></img>\n          <div className=\"ItemsInSet row w-50 justify-content-around\">\n            {\n              this.state.itemsInSet.map((item) => {\n                return (\n                  <Link className=\"SetItemLink\" to={'/items/' + item.url}><img width=\"64\" height=\"64\" src={item.img} alt=\"Item in set\" /></Link>\n                )\n              })\n            }\n          </div>\n          <button className=\"btn btn-info\" onClick={() => this.addItem(this.state.itemId)}>Add Item to Watch List</button>\n          {this.state.successfulAPICall\n            &&(\n            <div className=\"container data-container\">\n              {this.state.ducats > -1\n              &&(\n              <InfoList data={ducatsData} />\n              )}\n              <InfoList data={pricingData} />\n              {this.state.tradingTax > -1\n              &&(\n                <InfoList data={tradingTaxData} />\n              )}\n              {this.state.relics.length > 0\n              &&(\n                <InfoList data={relicsData} />\n              )}\n            </div>\n          )}\n          {chartData.length > 1\n            &&(\n              <div className=\"VictoryLineContainer\">\n                <VictoryChart>\n                  <VictoryArea\n                    style={{\n                      data: {\n                        fill: \"#c43a31\", fillOpacity: 0.7, stroke: \"#c43a31\", strokeWidth: 3\n                      },\n                      labels: {\n                        fontSize: 15,\n                        fill: ({ datum }) => datum.x === 3 ? \"#000000\" : \"#c43a31\"\n                      }\n                    }}\n                    data={chartData}\n                    labels={({ datum }) => {\n                      return datum.x % 2 === 0 ? datum.y : \"\";\n                    }}\n                  />\n                </VictoryChart>\n              </div>\n            )\n          }\n        </div>\n      );\n    }\n  }\n}\n\nexport default ItemInfo;\n","import './App.css';\nimport './bootstrap.min.css';\nimport React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Footer from './Footer';\nimport Header from './Header';\nimport SearchPage from './SearchPage';\nimport WatchList from './WatchList';\nimport ItemInfo from './ItemInfo';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Route exact path=\"/\" component={SearchPage} />\n      <Route path=\"/watchlist\" component={WatchList}/>\n      <Route path=\"/items/:itemName\" component={ItemInfo}/>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}